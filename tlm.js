/*
Tiny Language Model Neural Net

Portions generated by https://chat.openai.com/

MIT License

Copyright (c) 2023 Mayo-Smith & Parteners, LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/



const TRAINING_RUNS = 1000; //training runs per round

//Neural Net

/*
==============================================
Activation Function
==============================================
*/

function sigmoid(x) {
    return 1 / (1 + Math.exp(-x));
  }
  
  function sigmoidDerivative(x) {
    return x * (1 - x);
  }
  
/*
==============================================
Neural Network
==============================================
*/
  class NeuralNetwork {
    constructor(inputNodes, hiddenNodes, outputNodes) {
      this.inputNodes = inputNodes;
      this.hiddenNodes = hiddenNodes;
      this.outputNodes = outputNodes;
  
      this.weights_ih = Array.from({ length: hiddenNodes }, () => Array.from({ length: inputNodes }, () => Math.random() * 2 - 1));//Math.random() * 2 - 1));
      this.weights_ho = Array.from({ length: outputNodes }, () => Array.from({ length: hiddenNodes }, () => Math.random() * 2 - 1));//Math.random() * 2 - 1));
  
      this.bias_h = Array.from({ length: hiddenNodes }, () => Math.random() * 2 - 1);
      this.bias_o = Array.from({ length: outputNodes }, () => Math.random() * 2 - 1);
  
      this.learningRate = 0.1;
    }
  
    feedforward(inputArray) {
      const hidden = this.weights_ih.map((row, i) => row.reduce((acc, weight, j) => acc + weight * inputArray[j], this.bias_h[i])).map(sigmoid);
      const output = this.weights_ho.map((row, i) => row.reduce((acc, weight, j) => acc + weight * hidden[j], this.bias_o[i])).map(sigmoid);
      return output;
    }
  
    train(inputArray, targetArray) {
      const hidden = this.weights_ih.map((row, i) => row.reduce((acc, weight, j) => acc + weight * inputArray[j], this.bias_h[i])).map(sigmoid);
      const outputs = this.weights_ho.map((row, i) => row.reduce((acc, weight, j) => acc + weight * hidden[j], this.bias_o[i])).map(sigmoid);
  
      let outputErrors = outputs.map((output, i) => targetArray[i] - output);
      let hiddenErrors = this.weights_ho.reduce((acc, row, i) => acc.map((sum, j) => sum + row[j] * outputErrors[i]), Array(this.hiddenNodes).fill(0));
      this.weights_ho = this.weights_ho.map((row, i) => row.map((weight, j) => weight + this.learningRate * outputErrors[i] * sigmoidDerivative(outputs[i]) * hidden[j]));
      this.bias_o = this.bias_o.map((bias, i) => bias + this.learningRate * outputErrors[i] * sigmoidDerivative(outputs[i]));
  
      this.weights_ih = this.weights_ih.map((row, i) => row.map((weight, j) => weight + this.learningRate * hiddenErrors[i] * sigmoidDerivative(hidden[i]) * inputArray[j]));
      this.bias_h = this.bias_h.map((bias, i) => bias + this.learningRate * hiddenErrors[i] * sigmoidDerivative(hidden[i]));
    }
  }
  
  nn = new NeuralNetwork(2, 4, 1);
  const trainingData = [
    { input: [0, 0], target: [0] },
    { input: [0, 1], target: [1] },
    { input: [1, 0], target: [1] },
    { input: [1, 1], target: [0] },
  ];


/*
==============================================
Training Function
==============================================
*/
  
async function trainPenny(){
   
  // Get the textarea element
const textarea = document.getElementById('corpus');

const adj = getVocab("adjective");
const noun = getVocab("noun");

radio1.textOff = adj[0];
radio1.textOn = adj[1];
radio2.textOff = noun[0];
radio2.textOn = noun[1];

// Get the text from the textarea and split it into an array of lines
const text = textarea.value.trim();

const lines = text.split('\n');

console.log(nn);

// Create an empty array to hold the training data
const trainingData = [];

// Loop through each line of text and extract the first three words
lines.forEach(line => {

  const words = line.split(" ");



  // Add the inputs and output to the training data array
  trainingData.push({
    input: [ word2Val(words[0],"adjective"),
    word2Val(words[1],"noun")],
    target: [word2Val(words[2], "verb")]
  });
 
});

    for (let i = 0; i < TRAINING_RUNS; i++) {
        await delay(1).then(() => {
          trainingData.forEach(({ input, target }) => nn.train(input, target));
          redrawScreen();
          waitTimer.update(ctx,i);
        });
    
    }

    trainingTracker.increment(TRAINING_RUNS);
    waitTimer.clear(ctx);
    trainingStatus.text = "Model Trained " + trainingTracker.get() + " runs"; 
    trainingStatus.draw(ctx);

    console.log("done training");
    return 1;

  }

function testPenny(){
    
    //const test = getRadioStates();
    redrawScreen();
    outVal = nn.feedforward(getRadioStates());
  


    if(outVal <.5){
      drawText(val2Word(0,'verb'),OUT_LOC_X,OUT_LOC_Y);
    }
    else {
      drawText(val2Word(1,'verb'),OUT_LOC_X,OUT_LOC_Y);
    }

    return;

  }


function redrawScreen(){
  drawBackground();
  drawNeuralNetwork();
  drawInputs();
  guessButton.drawUp(ctx);
  trainingStatus.draw(ctx);
  
}

function drawBackground(){
  ctx.drawImage(imgBack, 0,0);
}

function drawInputs(){
  radio1.draw(ctx);
  radio2.draw(ctx);
}


function drawNeuron(x, y) {

  
  x+= X_OFFSET;
  ctx.beginPath();
  ctx.arc(x, y, neuronRadius, 0, 2 * Math.PI);
  ctx.fillStyle = '#734D5F';
  ctx.fill();
}

function drawConnection(x1, y1, x2, y2, weight) {

x1+=X_OFFSET;
x2+=X_OFFSET;

weightColor = getColorGradient(weight);
  
  ctx.lineWidth = 5;
  ctx.beginPath();
  ctx.moveTo(x1, y1);
  ctx.lineTo(x2, y2);
  ctx.strokeStyle = weightColor;
  ctx.stroke();

}

function drawNeuralNetwork() {



neuronRadius = 12;

/*const weights = [
  [0.5, 0.9],
  [-0.5, -0.9],
  [0.5, 0.5],
  [0.5, 0.5]
];
*/


  const inputLayerY = [
      nSpaceY,
      nSpaceY * 2
  ];

  const hiddenLayerY = [
      nSpaceY,
      nSpaceY*2,
      nSpaceY*3,
      nSpaceY*4,
  ];

  const outputLayerY = [canvas1.height / 2];

  drawBackground();

  // Draw connections
  for (let i = 0; i < ilFormat.length; i++) {
      for (let j = 0; j < hlFormat.length; j++) {
          drawConnection(ilFormat[i].x, ilFormat[i].y, hlFormat[j].x, hlFormat[j].y, nn.weights_ih[j][i]);//weights[j][i]);

      }
  }

  for (let i = 0; i < hiddenLayerY.length; i++) {
      drawConnection(hlFormat[i].x, hlFormat[i].y, olFormat[0].x, olFormat[0].y, nn.weights_ho[0][i]);//weights[i][0]);
    }

      // Draw neurons
      for (let i = 0; i < ilFormat.length; i++) {
        drawNeuron(ilFormat[i].x, ilFormat[i].y);
      }
      for (let i = 0; i < hlFormat.length; i++) {
        drawNeuron(hlFormat[i].x, hlFormat[i].y);
      }

      drawNeuron(olFormat[0].x, olFormat[0].y);

}


function normalizeWeight(weight){

    if(weight<=0){
      const a = 0.9; // choose a positive scaling factor
      return 1 / (1 + Math.exp(-a * weight));
      }
    else{
      const a = 0.9; // choose a positive scaling factor
      const b = 0;   // choose a shift parameter
      return 1 / (1 + Math.exp(-a * (weight - b)));
    }
    

}


async function delay(ms) {
return new Promise(resolve => setTimeout(resolve, ms));
}









